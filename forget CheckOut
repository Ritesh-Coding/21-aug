from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework.permissions import AllowAny
from rest_framework_simplejwt.authentication import JWTAuthentication
from .serializers import CheckOutUpdateSerializer
from .models import Attendence

class ForgetCheckOut(viewsets.ModelViewSet):
    authentication_classes = [JWTAuthentication]
    permission_classes = [AllowAny]
    serializer_class = CheckOutUpdateSerializer
    
    def get_queryset(self):
        # Custom queryset based on the request method
        if self.request.method == 'GET':
            # For GET requests, return the attendance records without a checkout for the current user
            return Attendence.objects.filter(employee_id=self.request.user.id, checkOut=None).order_by("-date")[:1]
        elif self.request.method == 'PATCH':
            # For PATCH requests, return all attendance records (or a different logic if required)
            return Attendence.objects.all()
        else:
            return super().get_queryset()

    def update(self, request, *args, **kwargs):
        # For PATCH requests, use a custom queryset that you may want to filter differently
        self.queryset = self.get_queryset()
        
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        
        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)  
        self.perform_update(serializer)
        
        return Response(serializer.data)
